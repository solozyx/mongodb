
db.product.insert({"sku" : "abc123", "description" : "Single line description."})
db.product.insert({"sku" : "abc789", "description" : "First line\nSecond line"})
db.product.insert({"sku" : "xyz456", "description" : "Many spaces before     line"})
db.product.insert({"sku" : "xyz789", "description" : "Multiple\nline description"})

> db.product.find()
{ "_id" : ObjectId("5ef06cbc01e1b314ff7c560d"), "sku" : "abc123", "description" : "Single line description." }
{ "_id" : ObjectId("5ef06cbc01e1b314ff7c560e"), "sku" : "abc789", "description" : "First line\nSecond line" }
{ "_id" : ObjectId("5ef06cbc01e1b314ff7c560f"), "sku" : "xyz456", "description" : "Many spaces before     line" }
{ "_id" : ObjectId("5ef06cbd01e1b314ff7c5610"), "sku" : "xyz789", "description" : "Multiple\nline description" }
>

db.collection.find( { sku: /adC/i } );

等效于下面这种写法
db.collection.find( { sku: { $regex: 'abC', $options: 'i' } } );

参数 i ,加了这个参数表示不区分大小写
参数 m ,个人理解这个参数是用来匹配value中有换行符(\n)的情形
        匹配规则中使用了锚,锚就是 ^开头 $结束
db.products.find({description:{$regex:/^S/,$options:'m'}})
匹配description字段的value值中,以大写S开头的value值
参数 s ,允许点字符(.)匹配所有的字符,包括换行符
参数 x ,官网的大意是忽视空白字符

> db.product.find( { description: { $regex: /^S/, $options: 'm' } } )
{ "_id" : ObjectId("5ef06cbc01e1b314ff7c560d"), "sku" : "abc123", "description" : "Single line description." }
{ "_id" : ObjectId("5ef06cbc01e1b314ff7c560e"), "sku" : "abc789", "description" : "First line\nSecond line" }
>
第2条记录中description的值包含\n换行字符,它之所以能匹配出来就是因为添加了m参数

> db.product.find( { description: { $regex: /^S/} } )
{ "_id" : ObjectId("5ef06cbc01e1b314ff7c560d"), "sku" : "abc123", "description" : "Single line description." }
>

> db.product.find( { description: { $regex: /S/ } } )
{ "_id" : ObjectId("5ef06cbc01e1b314ff7c560d"), "sku" : "abc123", "description" : "Single line description." }
{ "_id" : ObjectId("5ef06cbc01e1b314ff7c560e"), "sku" : "abc789", "description" : "First line\nSecond line" }
>


> db.product.find( { description: { $regex: /m.*line/, $options: 'si' } } )
{ "_id" : ObjectId("5ef06cbc01e1b314ff7c560f"), "sku" : "xyz456", "description" : "Many spaces before     line" }
{ "_id" : ObjectId("5ef06cbd01e1b314ff7c5610"), "sku" : "xyz789", "description" : "Multiple\nline description" }
>
匹配value中包含m且之后为任意字符包括换行符并且还包含line字符的字符串,不区分大小写

> db.product.find( { description: { $regex: /m.*line/, $options: 's' } } )
>


